{"version":3,"sources":["components/WeatherForm/WeatherForm.js","components/CityItemHistory/CityItemHistory.js","components/Main/Main.js","components/WeatherForecastWeekItem/WeatherForecastWeekItem.js","components/WeatherForecastList/WeatherForecastList.js","components/WeatherForecastDayItem/WeatherForecastDayItem.js","components/WeatherItem/WeatherItem.js","components/Weather/Weather.js","index.js","components/App/App.js"],"names":["WeatherForm","props","react_default","a","createElement","className","onChange","onWeatherInputChange","type","placeholder","react_router_dom","to","pathname","concat","city","value","CityItemHistory","Main","_useState","useState","_useState2","Object","slicedToArray","setCity","_useState3","_useState4","cityHistory","setCityHistory","useEffect","cityHistoryArr","i","localStorage","length","getItem","key","unshift","createHistory","WeatherForm_WeatherForm","e","target","map","idx","CityItemHistory_CityItemHistory","WeatherForecastWeekItem","weatherForecastDay","day","Date","date","getUTCDay","main_weather_arr","countDayHours","countNightHours","sumDayTemp","sumNightTemp","el","hour","getUTCHours","temp","pressure","humidity","push","mainWeather","main_weather","undefined","arr","new_arr","slice","sort","b","filter","v","pop","mode","toLowerCase","Math","floor","WeatherForecastList","count","weatherForecastList","weatherForecast","weatherForecastWeek","WeatherForecastWeekItem_WeatherForecastWeekItem","onClick","onClickBtnForecast","WeatherForecastDayItem","hours","weatherForecastDayTime","weatherForecastDayWeather","mainTemp","weatherForecastDayTemp","WeatherItem","weather_sentence","weather_description","currentTemp","sunrise","sunriseHour","sunriseMins","sunset","sunsetHour","sunsetMins","weatherForecastDayList","timezone","descriptionWeather","Fragment","currentDay","WeatherForecastDayItem_WeatherForecastDayItem","windSpeed","visibility","weather_api_key","Weather","_ref","percent","match","params","weather","setWeather","setWeatherForecast","_useState5","_useState6","timesOfDay","setTimesOfDay","_useState7","_useState8","isForecastOpen","setIsForecastOpen","currentHour","getUTCMinutes","setCityLocalStorage","setItem","parse_weather","data_weather","newWeather","cod","id","name","main","wind","speed","sys","dt","description","parse_weather_forecast","newWeatherForecast","newWeatherForecastList","list","forecast","getWeatherByCity","_ref2","asyncToGenerator","regenerator_default","mark","_callee","api_url","parsed_weather","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","_x","apply","this","arguments","getWeatherForecastByCity","_ref3","_callee2","_context2","_x2","isFillObject","obj","hasOwnProperty","createBg","calcNightPosition","calcDayPosition","WeatherItem_WeatherItem","cityName","WeatherForecastList_WeatherForecastList","ReactDOM","render","react_router","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.a11b0f75.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./WeatherForm.css\";\nimport { Link } from 'react-router-dom';\nexport default function WeatherForm(props) {\n  \n  return (\n    <div className=\"row form_city_weather\">\n      <div className=\"input_city\">\n        <div className=\"input_city_wrapper\">\n          <input\n            className=\"input input_text\"\n            onChange={props.onWeatherInputChange}\n            type=\"text\"\n            placeholder=\"city\"\n          />\n        </div>\n      </div>\n      <div className=\"input_submit_city\">\n        <Link\n           className=\"input input_submit\"to={{\n            pathname: `/weather?${props.city}`\n          }}\n        >\n          <input\n              value=\"weather\"\n              type=\"submit\"\n            />\n          </Link>\n      </div>      \n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport \"./CityItemHistory.css\";\n\nexport default function CityItemHistory(props) {\n\n  return (\n    <div className=\"row jstf-sp-btw align-items-center city_history_item\">\n       <p className=\"city_title\">{props.city}</p> \n       <div className=\"btn_history\">></div>\n       <Link\n            className=\"city_history_link\" to={{\n            pathname: `/weather?${props.city}`\n            }}/>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport WeatherForm from \"../WeatherForm/WeatherForm\";\nimport CityItemHistory from \"../CityItemHistory/CityItemHistory\";\n\nimport \"./Main.css\"\n\nexport default function Main() {\n  const [city, setCity] = useState(\"\");\n  const [cityHistory, setCityHistory] = useState()\n\n    const createHistory = () =>{\n      const cityHistoryArr = []\n      for(let i=0; i< localStorage.length; i++){\n        const city = localStorage.getItem(localStorage.key(i))\n        cityHistoryArr.unshift(city)\n      }\n      setCityHistory(cityHistoryArr)\n    }\n    \n    useEffect(()=>createHistory(),[])\n\n  return (\n    <div className=\"wrapper\">    \n        <section className=\"header\">\n          <div className=\"title\">CityWeather &deg;</div>\n        </section>\n        <WeatherForm\n          onWeatherInputChange={e => {\n            setCity(e.target.value);\n          }}\n\n          city={city}\n        />\n        {cityHistory && cityHistory.map((city,idx)=>{\n          return (\n            <CityItemHistory key={idx} city={city}/>\n          )\n        })} \n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./WeatherForecastWeekItem.css\";\n\nexport default function WeatherForecastWeekItem(props) {\n  const weatherForecastDay = props.weatherForecastDay;\n\n  const  days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n  \n  const day = days[(new Date(weatherForecastDay[0].date * 1000)).getUTCDay()]\n  const main_weather_arr = []\n\n  let countDayHours=0;\n  let countNightHours=0;\n  let sumDayTemp = 0;\n  let sumNightTemp =0;\n  let sumDayPressure =0;\n  let sumDayHumidity = 0;\n\n  weatherForecastDay.map((el)=>{\n    const date = new Date(el.date * 1000)\n    const hour = date.getUTCHours()\n    const temp = el.temp\n    const pressure = el.pressure\n    const humidity = el.humidity\n    if(hour>=9 && hour <=18){\n      sumDayTemp= sumDayTemp+ temp;\n      countDayHours++;\n      sumDayPressure= sumDayPressure+ pressure;\n      sumDayHumidity= sumDayHumidity+ humidity;\n      main_weather_arr.push(el.mainWeather)\n    } else {\n      sumNightTemp= sumNightTemp+ temp;\n      countNightHours++;\n    }\n    return (sumDayHumidity,sumDayPressure,sumDayTemp,sumNightTemp)\n  })\n\n  const mode = (arr)=>{\n   const new_arr=arr.slice()\n\n    return new_arr.sort((a,b) =>\n          new_arr.filter(v => v===a).length\n        - new_arr.filter(v => v===b).length\n    ).pop();\n  }\n\n  const main_weather = main_weather_arr[0]!==undefined ? mode(main_weather_arr).toLowerCase(): \"\"\n  \n  return (\n    <div className={`weather_forecast_week_item ${main_weather}` }>\n       \n        <div className=\"row align-items-center jstf-sp-btw forecast_info\">\n          <div className=\"weather_forecast_week_day\">{day}</div> \n          <div className=\"weather_icon_mini\"></div>\n          <div className=\"row weather_forecast_week_temp\">\n            <div className=\"weather_forecast_week_temp_day\">{countDayHours!==0 && Math.floor(sumDayTemp/countDayHours)}{countDayHours!==0 && <span>&deg;</span>}</div>\n            <div className=\"weather_forecast_week_temp_night\">{countNightHours!==0 && Math.floor(sumNightTemp/countNightHours)}{countNightHours!==0 && <span>&deg;</span>}</div>\n          </div>\n        </div>   \n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./WeatherForecastList.css\";\n\nimport WeatherForecastWeekItem from \"../WeatherForecastWeekItem/WeatherForecastWeekItem\";\n\nexport default function WeatherForecastList(props) {\n  const weatherForecastList = props.weatherForecast.weatherForecastList\n \n  let weatherForecastWeek=[]\n  let count;\n  let idx=0; \n  weatherForecastList.map((weatherForecast)=>{\n    const date = new Date(weatherForecast.date * 1000)\n    const day = date.getUTCDay()\n    if (count === undefined){\n      weatherForecastWeek.push([])\n      weatherForecastWeek[idx].push(weatherForecast)\n    }else if ( day!==count){\n      idx++;\n      weatherForecastWeek.push([])\n      weatherForecastWeek[idx].push(weatherForecast)\n     } else {\n      \n      weatherForecastWeek[idx].push(weatherForecast)\n    }  \n    count = day;\n    return weatherForecastWeek\n  }) \n  return (\n    \n    <div className=\"weather_forecast\">\n      \n      <div className=\"row jstf-sp-arnd forecast weather_forecast_week\" >\n      {weatherForecastWeek.slice(1).map((weatherForecastDay,idx) =>{ // первый день - это сегодняшний день, нет смысл показывать его в прогнозе на неделю.\n        return(\n          <WeatherForecastWeekItem \n          weatherForecastDay={weatherForecastDay}\n          key={idx}\n        />\n        )\n      })}\n       \n      </div>\n      <p onClick={props.onClickBtnForecast} className=\"btn_forecast_close\">close</p>\n    </div>\n  \n  );\n}\n","import React from \"react\";\nimport \"./WeatherForecastDayItem.css\";\n\nexport default function WeatherForecastDayItem(props) {\n\n  const date = new Date(props.weatherForecastDayTime  * 1000)\n  const hours = ('0' + date.getUTCHours()).slice(-2) + \":00\"\n\n  const mainWeather = props.weatherForecastDayWeather.toLowerCase();\n  const mainTemp =  Math.floor(props.weatherForecastDayTemp)\n\n  return (\n    <div className={`weather_forecast_day_item ${mainWeather}` }>\n        <p className=\"weather_forecast_day_time\">{hours}</p>\n        <div className=\"weather_icon_mini\"></div>\n        <p className=\"weather_forecast_day_temp\">{mainTemp} &deg;</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport WeatherForecastDayItem from \"../WeatherForecastDayItem/WeatherForecastDayItem\";\nimport \"./WeatherItem.css\";\n\n\n\n \nexport default function WeatherItem(props) {\n\n  let mainWeather = props.mainWeather.toLowerCase();\n\n  const currentTemp = Math.floor(props.temp)\n  \n  const sunrise = ('0' + props.sunriseHour).slice(-2) +\":\"+ ('0' + props.sunriseMins).slice(-2)\n  const sunset = ('0' + props.sunsetHour).slice(-2) +\":\"+ ('0' + props.sunsetMins).slice(-2)\n  \n  let weather_sentence,weather_description\n\n  switch (mainWeather){\n    case \"rain\":\n      weather_sentence=\"It's raining \";\n      break;\n    case \"sunny\":\n      weather_sentence=\"It's sunny\";\n      break;\n    case \"clouds\":\n      weather_sentence=\"It's cloudy\";\n      break;\n    case \"clear\":\n      weather_sentence=\"It's clear\";\n      break;\n    case \"drizzle\":\n      weather_sentence=\"It's drizzle\";\n      break;\n    case \"thunderstorm\":\n      weather_sentence=\"It's thunderstorm\";\n      break;\n    case \"snow\":\n        weather_sentence=\"It's snowing\";\n        break;\n    case \"fog\":\n    case \"mist\":\n    case \"smoke\":\n    case \"haze\":\n        weather_sentence=\"It's foggy\";\n        break;\n    case \"dust\":\n    case \"sand\":\n        weather_sentence=\"It's thunderstorm\";\n        break;\n    case \"ash\":\n    case \"squall\":\n    case \"tornado\":\n        weather_sentence=\"DON'T GO OUTSIDE\";\n        break;\n    default: \n      weather_sentence=\"It's something\";\n      break;\n  }\n  const weatherForecastDayList = props.weatherForecastDay\n  const timezone = props.weatherForecast.timezone\n\n\n\n\n\n  weather_description= props.descriptionWeather\n\n  return (\n    <>\n      <div className=\"top_section\">\n        <div className=\"row jstf-sp-btw\">\n          <div className=\"date\">\n            <p className=\"date_title\">today</p>      \n            <p className=\"current_date\">{props.currentDay}</p>\n          </div>\n          <div className=\"city\">\n            <p className=\"city_title\">city</p>\n            <p className=\"current_city\">{props.city}</p>\n          </div>\n        </div>\n        <div className=\"row jstf-sp-btw temperature_weather_icon\">\n          <div className=\"temperature\">\n            <p className=\"current_temperature\">{currentTemp}&deg;</p>\n          </div>\n          <div className=\"weather_icon\">\n\n          </div>\n        </div>\n      </div> \n      <div className=\"main_section\">\n        <div className=\"row jstf-sp-btw\">\n          <div className=\"weather_text\">\n            <p className=\"current_weather_text\">{`${weather_sentence} in  ${props.city} `}</p>\n          </div>\n          <div className=\"weather_text_description\">\n            <p>{weather_description}</p>\n          </div>\n        </div>\n        <div className=\"row forecast weather_forecast_day\">\n        {weatherForecastDayList.map((weatherForecastDay,idx)=>{\n            return(\n            <WeatherForecastDayItem\n              weatherForecastDayTime={weatherForecastDay.date+timezone}\n              weatherForecastDayWeather={weatherForecastDay.mainWeather}\n              weatherForecastDayTemp={weatherForecastDay.temp}\n              key={idx}\n            />)\n          })}\n        </div>\n      </div>  \n      <div className=\"bottom_section\">\n        <div className=\"other_info\">\n          <div className=\"row jstf-sp-btw weather_info\">\n            <div className=\"humidity\">\n              <p className=\"title_small humidity_title\">humidity</p>\n              <p className=\"current_humidity\">{props.humidity}%</p>\n            </div>\n            <div className=\"wind\">\n              <p className=\"title_small wind_title\">wind</p>\n              <p className=\"current_wind\">{props.windSpeed} <span className=\"units\">m/s</span></p>\n            </div>\n            <div className=\"visibility\">\n              <p className=\"title_small visibility_title\"> visibility</p>\n              <p className=\"current_visibility\">{ Math.floor(props.visibility/1000)} <span className=\"units\">km</span> </p>\n            </div>\n          </div>\n          <div className=\"row jstf-sp-arnd sunset_sunrise\">\n            <div className=\"sunrise\">\n              <p className=\"sunrise_title\">sunrise</p>\n              <p className=\"current_sunrise\">{sunrise}</p>\n              \n            </div>\n            <div className=\"sunset\">\n              <p className=\"sunset_title\">sunset</p>\n              <p className=\"current_sunset\">{sunset}</p>\n            \n            </div>\n          </div>\n          \n        </div>\n        <nav className=\"row jstf-sp-btw bottom_nav\">\n            <Link className=\"home_link\" to={{\n              pathname: `/weather/`\n              }}>home</Link>\n              <p onClick={props.onClickBtnForecast}>open forecast for {props.city}</p> \n        </nav>\n      </div>\n      \n\n      \n      \n    </>\n  );\n}\n","import React, { useState, useEffect} from \"react\";\n\n\nimport WeatherForecastList from \"../WeatherForecastList/WeatherForecastList\";\nimport WeatherItem from \"../WeatherItem/WeatherItem\";\nimport \"./Weather.css\";\n\nconst weather_api_key = \"e2bc6a595e6ee4928ed91c3778b2b446\";\n\nexport default function Weather({match}) {\n  const city = match.params.city;\n  \n  const [weather, setWeather] = useState({});\n  const [weatherForecast, setWeatherForecast] = useState({});\n\n  const [timesOfDay, setTimesOfDay] = useState(\"nothing\")\n  const [isForecastOpen,setIsForecastOpen] = useState(false)\n  let percent;\n\n  const  days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n\n  const currentDay = days[(new Date((weather.date+weather.timezone)  * 1000)).getUTCDay()]\n\n  const currentHour = (new Date((weather.date+weather.timezone)  * 1000)).getUTCHours()\n\n  const sunriseHour=(new Date((weather.sunrise+weather.timezone)*1000)).getUTCHours()\n  const sunsetHour=(new Date((weather.sunset+weather.timezone)*1000)).getUTCHours()\n  const sunriseMins=(new Date((weather.sunrise+weather.timezone)*1000)).getUTCMinutes()\n  const sunsetMins=(new Date((weather.sunset+weather.timezone)*1000)).getUTCMinutes()\n     \n  const setCityLocalStorage = (city) => {\n      const key = city;\n      const value = city;\n      key && value && localStorage.setItem(key,value)\n\n    \n  }\n\n  const parse_weather = data_weather => {\n    \n    let newWeather = {}; \n\n    if (data_weather.cod === 200) {\n      newWeather={\n        cod: data_weather.cod,\n        id: data_weather.id,\n        city: data_weather.name,\n        temp: data_weather.main.temp,\n        pressure: data_weather.main.pressure,\n        humidity: data_weather.main.humidity,\n        windSpeed: data_weather.wind.speed,\n        visibility: data_weather.visibility,\n        sunrise: data_weather.sys.sunrise,\n        sunset: data_weather.sys.sunset,\n        date: data_weather.dt,\n        timezone: data_weather.timezone,\n        mainWeather: data_weather.weather[0].main,\n        descriptionWeather: data_weather.weather[0].description\n      };\n      \n    }\n  \n    return newWeather\n  }\n\n  const parse_weather_forecast = data_weather => {\n\n    let newWeatherForecast =  {}; \n    const newWeatherForecastList = []\n    if (data_weather.cod === \"200\") {\n      data_weather.list.map(forecast => {\n        return(newWeatherForecastList.push({\n          temp: forecast.main.temp,\n          pressure: forecast.main.pressure,\n          humidity: forecast.main.humidity,\n          date: forecast.dt,\n          mainWeather: forecast.weather[0].main,\n          descriptionWeather: forecast.weather[0].description\n        }));\n      })\n      newWeatherForecast = {\n        weatherForecastList: newWeatherForecastList,\n        timezone: data_weather.city.timezone\n      }\n      \n    }\n    \n    return newWeatherForecast;\n  };\n\n  \n  const getWeatherByCity = async city => {\n    const api_url = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${weather_api_key}&lang=eng&units=metric`\n    );\n    const data_weather = await api_url.json();\n    \n    const parsed_weather = parse_weather(data_weather);\n    parsed_weather.cod===200 &&  setCityLocalStorage(parsed_weather.city)\n\n    return setWeather(parsed_weather);\n\n  };\n\n  \n\n  const getWeatherForecastByCity = async city => {\n    const api_url = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${weather_api_key}&lang=eng&units=metric`\n    );\n    const data_weather = await api_url.json();\n\n    const parsed_weather = parse_weather_forecast(data_weather);\n    \n    return setWeatherForecast(parsed_weather)\n  };\n\n  function isFillObject(obj) {\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            return true;\n        }\n    }\n    return false;\n  }\n\n  const calcNightPosition = (hour,sunsetHour,sunriseHour) =>{\n\n    if(sunsetHour>sunriseHour){\n      if((hour-sunsetHour) < 0){\n        percent =(24-sunsetHour+hour)/(24-sunsetHour+sunriseHour) * 100\n      } else {\n        percent =(hour-sunsetHour)/(24-sunsetHour+sunriseHour) * 100\n      }\n    } else {\n      percent =(hour-sunsetHour)/(sunriseHour-sunsetHour) * 100\n    }\n   \n       \n    return percent\n  }\n  const calcDayPosition = (hour,sunsetHour,sunriseHour) =>{\n\n    if(sunsetHour<sunriseHour){\n      if((hour-sunriseHour)<0){\n        percent = (24-sunriseHour+hour)/ (24-(sunriseHour+sunsetHour)) * 100\n      } else {\n        percent = (hour-sunriseHour)/ (24-(sunriseHour+sunsetHour)) * 100\n      }\n    } else {\n      percent = (hour-sunriseHour)/ (sunsetHour-sunriseHour) * 100\n    }\n\n    return percent\n  }\n\n  const createBg = (hour,sunsetHour,sunriseHour) =>{\n    if(hour>=sunsetHour || hour<=sunriseHour){\n      calcNightPosition(hour,sunsetHour,sunriseHour)\n      if(percent>=0&&percent<20){\n        setTimesOfDay(\"evening\")\n        \n      } else if (percent>=20&&percent<66){\n        setTimesOfDay(\"night\")\n      } else if(percent>66&&percent<=100){\n        setTimesOfDay(\"late_night\")\n      }\n      \n    } else {\n      calcDayPosition(hour,sunsetHour,sunriseHour)\n  \n      if(percent>=0 && percent<20){\n        setTimesOfDay(\"morning\")\n        \n      } else if (percent>=20&&percent<80){\n        setTimesOfDay(\"day\")\n      } else if(percent>80&&percent<=100){\n        setTimesOfDay(\"evening\")\n      }\n      \n    }\n  }\n\n  useEffect(() => {\n    getWeatherByCity(city);\n    getWeatherForecastByCity(city)  \n  }, [city]);\n\n  useEffect(() => {\n    createBg(currentHour,sunsetHour,sunriseHour)\n  }, [weather]);\n\n  return (\n    <div className={`weather  ${timesOfDay}`}>\n      <div className={`weather_wrap ${weather.mainWeather&&(weather.mainWeather).toLowerCase()}`}>\n          <div className=\"row jstf-sp-btw weather_item\">\n            { isFillObject(weather)&&isFillObject(weatherForecast)&&(<WeatherItem\n              city={weather.city}\n              temp={weather.temp}\n              key={weather.cityName}        \n              humidity={weather.humidity}\n              windSpeed={weather.windSpeed}\n              visibility={weather.visibility}\n              currentHour={currentHour}\n              currentDay={currentDay}\n              sunsetHour={sunsetHour}\n              sunsetMins={sunsetMins}\n              sunriseHour={sunriseHour}\n              sunriseMins={sunriseMins}\n              mainWeather={weather.mainWeather}\n              descriptionWeather={weather.descriptionWeather}\n              weatherForecast={weatherForecast}\n              onClickBtnForecast = {()=>setIsForecastOpen(true)}\n              weatherForecastDay={weatherForecast.weatherForecastList.slice(0, 8)} \n\n            />)}\n          </div>\n              { isForecastOpen && isFillObject(weatherForecast)&&     \n                <WeatherForecastList\n                  weatherForecast={weatherForecast}  \n                  onClickBtnForecast = {()=>setIsForecastOpen(false)}  \n                />}\n        </div>\n      </div>\n    \n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\n\nimport Main from \"../Main/Main\"; \nimport Weather from \"../Weather/Weather\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"mainPage\">\n        <Switch>\n          <Route exact path=\"/weather\" component={Main} />\n          <Route path=\"/weather?:city\" component={Weather} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}